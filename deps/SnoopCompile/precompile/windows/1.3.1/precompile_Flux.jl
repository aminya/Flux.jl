function _precompile_()
    ccall(:jl_generating_output, Cint, ()) == 1 || return nothing
    Base.precompile(Tuple{BatchNorm{typeof(identity),Array{Float32,1},Array{Float32,1},Float32},Array{Float32,2}})
    Base.precompile(Tuple{BatchNorm{typeof(identity),Array{Float32,1},Array{Float32,1},Float32},Array{Float32,3}})
    Base.precompile(Tuple{BatchNorm{typeof(identity),Array{Float32,1},Array{Float32,1},Float32},Array{Float32,4}})
    Base.precompile(Tuple{BatchNorm{typeof(identity),Array{Float32,1},Array{Float32,1},Float32},Array{Float32,5}})
    Base.precompile(Tuple{BatchNorm{typeof(identity),Array{Float32,1},Array{Float32,1},Float32},Array{Float32,6}})
    Base.precompile(Tuple{BatchNorm{typeof(identity),Array{Float32,1},Array{Float32,1},Float32},Array{Float64,2}})
    Base.precompile(Tuple{BatchNorm{typeof(σ),Array{Float32,1},Array{Float32,1},Float32},Array{Float64,2}})
    Base.precompile(Tuple{Chain{Tuple{Dense{typeof(relu),Array{Float32,2},Array{Float32,1}},Dense{typeof(identity),Array{Float32,2},Array{Float32,1}}}},Array{Float64,1}})
    Base.precompile(Tuple{Chain{Tuple{Dense{typeof(relu),Array{Float64,2},Array{Float64,1}},Dense{typeof(identity),Array{Float64,2},Array{Float64,1}}}},Array{Float64,1}})
    Base.precompile(Tuple{ConvTranspose{2,4,typeof(identity),Array{Float32,4},Array{Float32,1}},Array{Float32,4}})
    Base.precompile(Tuple{Conv{2,4,typeof(identity),Array{Float32,4},Array{Float32,1}},Array{Float32,4}})
    Base.precompile(Tuple{Conv{2,4,typeof(identity),Array{Float64,4},Array{Float64,1}},Array{Float32,4}})
    Base.precompile(Tuple{Core.Type{Flux.Data.DataLoader},Array{Float64,2},Vararg{Any,N} where N})
    Base.precompile(Tuple{Core.Type{Flux.Data.DataLoader},Array{Float64,2}})
    Base.precompile(Tuple{Core.kwftype(typeof(Flux.fmap)),NamedTuple{(:cache,),Tuple{IdDict{Any,Any}}},typeof(fmap),Function,Dense{typeof(identity),Array{Float32,2},Array{Float32,1}}})
    Base.precompile(Tuple{Core.kwftype(typeof(Flux.fmap)),NamedTuple{(:cache,),Tuple{IdDict{Any,Any}}},typeof(fmap),Function,Dense{typeof(identity),Array{Float64,2},Array{Float64,1}}})
    Base.precompile(Tuple{Core.kwftype(typeof(Flux.fmap)),NamedTuple{(:cache,),Tuple{IdDict{Any,Any}}},typeof(fmap),Function,Dense{typeof(relu),Array{Float32,2},Array{Float32,1}}})
    Base.precompile(Tuple{Core.kwftype(typeof(Flux.fmap)),NamedTuple{(:cache,),Tuple{IdDict{Any,Any}}},typeof(fmap),Function,Dense{typeof(relu),Array{Float64,2},Array{Float64,1}}})
    Base.precompile(Tuple{Core.kwftype(typeof(Flux.throttle)),NamedTuple{(:leading, :trailing),Tuple{Bool,Bool}},typeof(throttle),Function,Int64})
    Base.precompile(Tuple{Core.kwftype(typeof(Flux.tversky_loss)),NamedTuple{(:β,),Tuple{Float64}},typeof(Flux.tversky_loss),Array{Float64,2},Array{Float64,2}})
    Base.precompile(Tuple{Core.var"#kw#Type",NamedTuple{(:batchsize, :partial),Tuple{Int64,Bool}},Core.Type{Flux.Data.DataLoader},Array{Int64,2}})
    Base.precompile(Tuple{Core.var"#kw#Type",NamedTuple{(:batchsize,),Tuple{Int64}},Core.Type{Flux.Data.DataLoader},Array{Int64,2},Array{Int64,1}})
    Base.precompile(Tuple{Core.var"#kw#Type",NamedTuple{(:batchsize,),Tuple{Int64}},Core.Type{Flux.Data.DataLoader},Array{Int64,2}})
    Base.precompile(Tuple{Core.var"#kw#Type",NamedTuple{(:dims,),Tuple{Int64}},Type{Dropout},Float64})
    Base.precompile(Tuple{Core.var"#kw#Type",NamedTuple{(:initW, :initb),Tuple{typeof(ones),typeof(zeros)}},Type{Dense},Int64,Int64,Function})
    Base.precompile(Tuple{Core.var"#kw#Type",NamedTuple{(:pad,),Tuple{NTuple{4,Int64}}},Type{Conv},Tuple{Int64,Int64},Pair{Int64,Int64},Function})
    Base.precompile(Tuple{Core.var"#kw#Type",NamedTuple{(:stride, :pad),Tuple{Int64,Int64}},Type{ConvTranspose},Tuple{Int64,Int64},Pair{Int64,Int64}})
    Base.precompile(Tuple{Core.var"#kw#Type",NamedTuple{(:stride, :pad),Tuple{Int64,Int64}},Type{Conv},Tuple{Int64,Int64},Pair{Int64,Int64}})
    Base.precompile(Tuple{Core.var"#kw#Type",NamedTuple{(:stride, :pad),Tuple{Int64,Int64}},Type{CrossCor},Tuple{Int64,Int64},Pair{Int64,Int64}})
    Base.precompile(Tuple{Core.var"#kw#Type",NamedTuple{(:stride, :pad),Tuple{Int64,Int64}},Type{DepthwiseConv},Tuple{Int64,Int64},Pair{Int64,Int64}})
    Base.precompile(Tuple{Core.var"#kw#Type",NamedTuple{(:stride, :pad),Tuple{Int64,Int64}},Type{MaxPool},Tuple{Int64,Int64}})
    Base.precompile(Tuple{Core.var"#kw#Type",NamedTuple{(:stride, :pad),Tuple{Int64,Int64}},Type{MeanPool},Tuple{Int64,Int64}})
    Base.precompile(Tuple{Core.var"#kw#Type",NamedTuple{(:stride, :pad, :dilation),Tuple{Int64,Int64,Int64}},Type{ConvTranspose},Array{Float32,4},Array{Float32,1},Function})
    Base.precompile(Tuple{Core.var"#kw#Type",NamedTuple{(:stride, :pad, :dilation),Tuple{Int64,Int64,Int64}},Type{ConvTranspose},Tuple{Int64,Int64},Pair{Int64,Int64}})
    Base.precompile(Tuple{Core.var"#kw#Type",NamedTuple{(:stride, :pad, :dilation),Tuple{Int64,Int64,Int64}},Type{Conv},Array{Float32,4},Array{Float32,1},Function})
    Base.precompile(Tuple{Core.var"#kw#Type",NamedTuple{(:stride, :pad, :dilation),Tuple{Int64,Int64,Int64}},Type{Conv},Tuple{Int64,Int64},Pair{Int64,Int64}})
    Base.precompile(Tuple{Core.var"#kw#Type",NamedTuple{(:stride, :pad, :dilation),Tuple{Int64,Int64,Int64}},Type{CrossCor},Array{Float32,4},Array{Float32,1},Function})
    Base.precompile(Tuple{Core.var"#kw#Type",NamedTuple{(:stride, :pad, :dilation),Tuple{Int64,Int64,Int64}},Type{CrossCor},Tuple{Int64,Int64},Pair{Int64,Int64}})
    Base.precompile(Tuple{Core.var"#kw#Type",NamedTuple{(:stride, :pad, :dilation),Tuple{Int64,Int64,Int64}},Type{DepthwiseConv},Array{Float32,4},Array{Float32,1},Function})
    Base.precompile(Tuple{Core.var"#kw#Type",NamedTuple{(:stride, :pad, :dilation),Tuple{Int64,Int64,Int64}},Type{DepthwiseConv},Tuple{Int64,Int64},Pair{Int64,Int64}})
    Base.precompile(Tuple{Core.var"#kw#Type",NamedTuple{(:stride, :pad, :dilation),Tuple{Int64,NTuple{4,Int64},Int64}},Type{Conv},Array{Float32,4},Array{Float32,1},Function})
    Base.precompile(Tuple{Core.var"#kw#Type",NamedTuple{(:stride,),Tuple{Int64}},Type{ConvTranspose},Tuple{Int64,Int64},Pair{Int64,Int64}})
    Base.precompile(Tuple{Core.var"#kw#Type",NamedTuple{(:stride,),Tuple{Int64}},Type{Conv},Tuple{Int64,Int64},Pair{Int64,Int64}})
    Base.precompile(Tuple{Core.var"#kw#Type",NamedTuple{(:stride,),Tuple{Int64}},Type{CrossCor},Tuple{Int64,Int64},Pair{Int64,Int64}})
    Base.precompile(Tuple{Core.var"#kw#Type",NamedTuple{(:stride,),Tuple{Int64}},Type{DepthwiseConv},Tuple{Int64,Int64},Pair{Int64,Int64}})
    Base.precompile(Tuple{Core.var"#kw#Type",NamedTuple{(:stride,),Tuple{Int64}},Type{MaxPool},Tuple{Int64,Int64}})
    Base.precompile(Tuple{Core.var"#kw#Type",NamedTuple{(:stride,),Tuple{Int64}},Type{MeanPool},Tuple{Int64,Int64}})
    Base.precompile(Tuple{CrossCor{2,4,typeof(identity),Array{Float64,4},Array{Float64,1}},Array{Float32,4}})
    Base.precompile(Tuple{Dense{typeof(identity),Array{Float32,2},Array{Float32,1}},Array{Float64,1}})
    Base.precompile(Tuple{Dense{typeof(identity),Array{Float32,2},Array{Float32,1}},Array{Float64,2}})
    Base.precompile(Tuple{Dense{typeof(identity),Array{Float64,2},Array{Float64,1}},Array{Float64,2}})
    Base.precompile(Tuple{DepthwiseConv{2,4,typeof(identity),Array{Float32,4},Array{Float32,1}},Array{Float32,4}})
    Base.precompile(Tuple{Dropout{Float64,Colon},Array{Float64,1}})
    Base.precompile(Tuple{Dropout{Float64,Int64},Array{Float64,2}})
    Base.precompile(Tuple{Flux.Diagonal{Array{Float32,1}},Array{Float64,1}})
    Base.precompile(Tuple{Flux.Diagonal{Array{Float32,1}},Array{Int64,1}})
    Base.precompile(Tuple{Flux.Diagonal{Array{Float32,1}},Array{Int64,2}})
    Base.precompile(Tuple{Flux.Diagonal{Array{Float32,1}},Int64})
    Base.precompile(Tuple{GlobalMaxPool,Array{Float32,4}})
    Base.precompile(Tuple{GlobalMeanPool,Array{Float32,4}})
    Base.precompile(Tuple{GroupNorm{typeof(identity),Array{Float32,1},Array{Float32,2},Float32,Int64},Array{Float32,3}})
    Base.precompile(Tuple{GroupNorm{typeof(identity),Array{Float32,1},Array{Float32,2},Float32,Int64},Array{Float32,5}})
    Base.precompile(Tuple{GroupNorm{typeof(identity),Array{Float32,1},Array{Float32,2},Float32,Int64},Array{Float64,3}})
    Base.precompile(Tuple{GroupNorm{typeof(σ),Array{Float32,1},Array{Float32,2},Float32,Int64},Array{Float64,3}})
    Base.precompile(Tuple{InstanceNorm{typeof(identity),Array{Float32,1},Array{Float32,1},Float32},Array{Float32,3}})
    Base.precompile(Tuple{InstanceNorm{typeof(identity),Array{Float32,1},Array{Float32,1},Float32},Array{Float32,4}})
    Base.precompile(Tuple{InstanceNorm{typeof(identity),Array{Float32,1},Array{Float32,1},Float32},Array{Float32,5}})
    Base.precompile(Tuple{InstanceNorm{typeof(identity),Array{Float32,1},Array{Float32,1},Float32},Array{Float32,6}})
    Base.precompile(Tuple{InstanceNorm{typeof(identity),Array{Float32,1},Array{Float32,1},Float32},Array{Float64,3}})
    Base.precompile(Tuple{InstanceNorm{typeof(σ),Array{Float32,1},Array{Float32,1},Float32},Array{Float64,3}})
    Base.precompile(Tuple{MaxPool{2,4},Array{Float32,4}})
    Base.precompile(Tuple{Maxout{NTuple{4,typeof(identity)}},Array{Float64,1}})
    Base.precompile(Tuple{MeanPool{2,4},Array{Float32,4}})
    Base.precompile(Tuple{SkipConnection,Array{Float64,2}})
    Base.precompile(Tuple{SkipConnection,Array{Float64,4}})
    Base.precompile(Tuple{Type{ADADelta},Float64})
    Base.precompile(Tuple{Type{ADAGrad},Float64})
    Base.precompile(Tuple{Type{ADAM},Float64})
    Base.precompile(Tuple{Type{ADAM}})
    Base.precompile(Tuple{Type{AMSGrad}})
    Base.precompile(Tuple{Type{AdaMax}})
    Base.precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Axes,F,Args} where Args<:Tuple where F where Axes},typeof(binarycrossentropy),Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Nothing,typeof(σ),Tuple{Array{Float64,1}}},Array{Float64,1}}})
    Base.precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Axes,F,Args} where Args<:Tuple where F where Axes},typeof(logitbinarycrossentropy),Tuple{Array{Float64,1},Array{Float64,1}}})
    Base.precompile(Tuple{Type{BatchNorm},Int64,Function})
    Base.precompile(Tuple{Type{BatchNorm},Int64})
    Base.precompile(Tuple{Type{BatchNorm},typeof(σ),Array{Float32,1},Array{Float32,1},Array{Float32,1},Array{Float32,1},Float32,Float32,Nothing})
    Base.precompile(Tuple{Type{Chain},Conv{2,4,typeof(identity),Array{Float32,4},Array{Float32,1}},Vararg{Conv{2,4,typeof(identity),Array{Float32,4},Array{Float32,1}},N} where N})
    Base.precompile(Tuple{Type{Chain},Conv{2,4,typeof(relu),Array{Float32,4},Array{Float32,1}},Vararg{Any,N} where N})
    Base.precompile(Tuple{Type{Chain},CrossCor{2,4,typeof(relu),Array{Float32,4},Array{Float32,1}},Vararg{Any,N} where N})
    Base.precompile(Tuple{Type{Chain},Dense{typeof(identity),Array{Float32,2},Array{Float32,1}},Vararg{Any,N} where N})
    Base.precompile(Tuple{Type{Chain},Dense{typeof(relu),Array{Float32,2},Array{Float32,1}},Vararg{Any,N} where N})
    Base.precompile(Tuple{Type{Chain},Dense{typeof(σ),Array{Float32,2},Array{Float32,1}},Vararg{Any,N} where N})
    Base.precompile(Tuple{Type{Chain},Flux.Recur{Flux.RNNCell{typeof(tanh),Array{Float32,2},Array{Float32,1}}},Vararg{Flux.Recur{Flux.RNNCell{typeof(tanh),Array{Float32,2},Array{Float32,1}}},N} where N})
    Base.precompile(Tuple{Type{Chain},Function,Vararg{Function,N} where N})
    Base.precompile(Tuple{Type{Chain}})
    Base.precompile(Tuple{Type{ConvTranspose},Tuple{Int64,Int64},Pair{Int64,Int64}})
    Base.precompile(Tuple{Type{ConvTranspose},typeof(identity),Array{Float32,4},Array{Float32,1},Tuple{Int64,Int64},NTuple{4,Int64},Tuple{Int64,Int64}})
    Base.precompile(Tuple{Type{Conv},Array{Float64,4},Array{Float64,1}})
    Base.precompile(Tuple{Type{Conv},Tuple{Int64,Int64},Pair{Int64,Int64},Function})
    Base.precompile(Tuple{Type{Conv},Tuple{Int64,Int64},Pair{Int64,Int64}})
    Base.precompile(Tuple{Type{Conv},typeof(identity),Array{Float32,4},Array{Float32,1},Tuple{Int64,Int64},NTuple{4,Int64},Tuple{Int64,Int64}})
    Base.precompile(Tuple{Type{Conv},typeof(relu),Array{Float32,4},Array{Float32,1},Tuple{Int64,Int64},NTuple{4,Int64},Tuple{Int64,Int64}})
    Base.precompile(Tuple{Type{Conv},typeof(σ),Array{Float32,4},Array{Float32,1},Tuple{Int64,Int64},NTuple{4,Int64},Tuple{Int64,Int64}})
    Base.precompile(Tuple{Type{CrossCor},Array{Float64,4},Array{Float64,1}})
    Base.precompile(Tuple{Type{CrossCor},Tuple{Int64,Int64},Pair{Int64,Int64},Function})
    Base.precompile(Tuple{Type{CrossCor},Tuple{Int64,Int64},Pair{Int64,Int64}})
    Base.precompile(Tuple{Type{CrossCor},typeof(identity),Array{Float32,4},Array{Float32,1},Tuple{Int64,Int64},NTuple{4,Int64},Tuple{Int64,Int64}})
    Base.precompile(Tuple{Type{CrossCor},typeof(relu),Array{Float32,4},Array{Float32,1},Tuple{Int64,Int64},NTuple{4,Int64},Tuple{Int64,Int64}})
    Base.precompile(Tuple{Type{Dense},Array{Float32,2},Array{Float32,1},typeof(relu)})
    Base.precompile(Tuple{Type{Dense},Array{Float64,2},Array{Float64,1},typeof(identity)})
    Base.precompile(Tuple{Type{Dense},Array{Float64,2},Array{Float64,1},typeof(relu)})
    Base.precompile(Tuple{Type{Dense},Int64,Int64,Function})
    Base.precompile(Tuple{Type{Dense},Int64,Int64})
    Base.precompile(Tuple{Type{DepthwiseConv},Tuple{Int64,Int64},Pair{Int64,Int64}})
    Base.precompile(Tuple{Type{Descent},Float64})
    Base.precompile(Tuple{Type{Descent}})
    Base.precompile(Tuple{Type{Dropout},Float64})
    Base.precompile(Tuple{Type{Dropout},Int64})
    Base.precompile(Tuple{Type{ExpDecay}})
    Base.precompile(Tuple{Type{Flux.Diagonal},Int64})
    Base.precompile(Tuple{Type{Flux.Recur},Flux.RNNCell{typeof(tanh),Array{Float32,2},Array{Float32,1}}})
    Base.precompile(Tuple{Type{GlobalMaxPool}})
    Base.precompile(Tuple{Type{GlobalMeanPool}})
    Base.precompile(Tuple{Type{GroupNorm},Int64,Int64,Function})
    Base.precompile(Tuple{Type{GroupNorm},Int64,Int64})
    Base.precompile(Tuple{Type{GroupNorm},Int64,typeof(σ),Array{Float32,1},Array{Float32,1},Array{Float32,2},Array{Float32,2},Float32,Float32,Nothing})
    Base.precompile(Tuple{Type{InstanceNorm},Int64,Function})
    Base.precompile(Tuple{Type{InstanceNorm},Int64})
    Base.precompile(Tuple{Type{InstanceNorm},typeof(σ),Array{Float32,1},Array{Float32,1},Array{Float32,1},Array{Float32,1},Float32,Float32,Nothing})
    Base.precompile(Tuple{Type{InvDecay}})
    Base.precompile(Tuple{Type{MaxPool},Tuple{Int64,Int64}})
    Base.precompile(Tuple{Type{Maxout},NTuple{4,Dense{typeof(identity),Array{Float32,2},Array{Float32,1}}}})
    Base.precompile(Tuple{Type{Maxout},NTuple{4,typeof(identity)}})
    Base.precompile(Tuple{Type{Maxout},Tuple{Conv{2,4,typeof(identity),Array{Float32,4},Array{Float32,1}},Conv{2,4,typeof(identity),Array{Float32,4},Array{Float32,1}}}})
    Base.precompile(Tuple{Type{MeanPool},Tuple{Int64,Int64}})
    Base.precompile(Tuple{Type{Momentum}})
    Base.precompile(Tuple{Type{NADAM}})
    Base.precompile(Tuple{Type{NamedTuple{(:cell, :init),T} where T<:Tuple},Tuple{Flux.RNNCell{typeof(tanh),Array{Float32,2},Array{Float32,1}},Array{Float32,1}}})
    Base.precompile(Tuple{Type{Nesterov}})
    Base.precompile(Tuple{Type{Optimiser},ExpDecay,Vararg{Any,N} where N})
    Base.precompile(Tuple{Type{Optimiser},InvDecay,Vararg{Any,N} where N})
    Base.precompile(Tuple{Type{Optimiser},WeightDecay,Vararg{Any,N} where N})
    Base.precompile(Tuple{Type{RADAM}})
    Base.precompile(Tuple{Type{RMSProp}})
    Base.precompile(Tuple{Type{SkipConnection},Dense{typeof(identity),Array{Float32,2},Array{Float32,1}},Function})
    Base.precompile(Tuple{Type{SkipConnection},Function,Function})
    Base.precompile(Tuple{Type{WeightDecay}})
    Base.precompile(Tuple{Zygote.var"#356#back#186"{Zygote.var"#back#185"{:bias,Zygote.Context,ConvTranspose{2,4,typeof(identity),Array{Float32,4},Array{Float32,1}},Array{Float32,1}}},Array{Float32,1}})
    Base.precompile(Tuple{Zygote.var"#356#back#186"{Zygote.var"#back#185"{:stride,Zygote.Context,ConvTranspose{2,4,typeof(identity),Array{Float32,4},Array{Float32,1}},Tuple{Int64,Int64}}},Tuple{Nothing,Nothing}})
    Base.precompile(Tuple{Zygote.var"#378#back#196"{Zygote.Jnew{Flux.var"#113#114",Nothing,false}},Nothing})
    Base.precompile(Tuple{typeof(ADAMW)})
    Base.precompile(Tuple{typeof(Base.Broadcast.broadcasted),Dense{typeof(identity),Array{Float32,2},Array{Float32,1}},Array{Float64,1}})
    Base.precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!),Array{Array{Float64,3},1},Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Tuple{Base.OneTo{Int64}},typeof(Flux.unsqueeze),Tuple{Base.Broadcast.Extruded{Array{Array{Float64,2},1},Tuple{Bool},Tuple{Int64}},Int64}},Base.OneTo{Int64},Int64,Int64})
    Base.precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!),Array{Array{Int64,2},1},Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Tuple{Base.OneTo{Int64}},typeof(Flux.unsqueeze),Tuple{Base.Broadcast.Extruded{Array{Array{Int64,1},1},Tuple{Bool},Tuple{Int64}},Int64}},Base.OneTo{Int64},Int64,Int64})
    Base.precompile(Tuple{typeof(Base.Broadcast.materialize),Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Nothing,Dense{typeof(identity),Array{Float32,2},Array{Float32,1}},Tuple{Array{Float64,1}}}})
    Base.precompile(Tuple{typeof(Base.Broadcast.materialize),Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Nothing,typeof(binarycrossentropy),Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Nothing,typeof(σ),Tuple{Array{Float64,1}}},Array{Float64,1}}}})
    Base.precompile(Tuple{typeof(Base.Broadcast.materialize),Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Nothing,typeof(logitbinarycrossentropy),Tuple{Array{Float64,1},Array{Float64,1}}}})
    Base.precompile(Tuple{typeof(Base._array_for),Type{Conv{2,4,typeof(identity),Array{Float32,4},Array{Float32,1}}},UnitRange{Int64},Base.HasShape{1}})
    Base.precompile(Tuple{typeof(Base.promote_typeof),ADADelta,AMSGrad,Vararg{Any,N} where N})
    Base.precompile(Tuple{typeof(Base.promote_typeof),ADAGrad,AdaMax,Vararg{Any,N} where N})
    Base.precompile(Tuple{typeof(Base.promote_typeof),ADAM,Nesterov,Vararg{Any,N} where N})
    Base.precompile(Tuple{typeof(Base.promote_typeof),AMSGrad,NADAM,Vararg{Any,N} where N})
    Base.precompile(Tuple{typeof(Base.promote_typeof),AdaMax,ADADelta,Vararg{Any,N} where N})
    Base.precompile(Tuple{typeof(Base.promote_typeof),Descent,ADAM,Vararg{Any,N} where N})
    Base.precompile(Tuple{typeof(Base.promote_typeof),NADAM,RADAM,Vararg{Any,N} where N})
    Base.precompile(Tuple{typeof(Base.promote_typeof),Nesterov,RMSProp,Vararg{Any,N} where N})
    Base.precompile(Tuple{typeof(Base.promote_typeof),Optimiser,ADAGrad,Vararg{Any,N} where N})
    Base.precompile(Tuple{typeof(Base.promote_typeof),RADAM,Descent,Vararg{Any,N} where N})
    Base.precompile(Tuple{typeof(Base.promote_typeof),RMSProp,Momentum})
    Base.precompile(Tuple{typeof(Base.vect),Optimiser,Vararg{Any,N} where N})
    Base.precompile(Tuple{typeof(Base.vect),Type{InvDecay},Vararg{DataType,N} where N})
    Base.precompile(Tuple{typeof(Core.Compiler.eltype),Type{Array{Dense{typeof(identity),Array{Float32,2},Array{Float32,1}},1}}})
    Base.precompile(Tuple{typeof(Flux.Data.CMUDict.cmudict)})
    Base.precompile(Tuple{typeof(Flux.Data.CMUDict.phones)})
    Base.precompile(Tuple{typeof(Flux.Data.CMUDict.symbols)})
    Base.precompile(Tuple{typeof(Flux.Data.FashionMNIST.images)})
    Base.precompile(Tuple{typeof(Flux.Data.FashionMNIST.labels)})
    Base.precompile(Tuple{typeof(Flux.Data.Housing.features)})
    Base.precompile(Tuple{typeof(Flux.Data.Housing.targets)})
    Base.precompile(Tuple{typeof(Flux.Data.Iris.features)})
    Base.precompile(Tuple{typeof(Flux.Data.Iris.labels)})
    Base.precompile(Tuple{typeof(Flux.Data.MNIST.images)})
    Base.precompile(Tuple{typeof(Flux.Data.MNIST.labels)})
    Base.precompile(Tuple{typeof(Flux.Data.Sentiment.totree_),String,Expr,Expr})
    Base.precompile(Tuple{typeof(Flux.Data.Sentiment.totree_),String,String})
    Base.precompile(Tuple{typeof(Flux.Data.Sentiment.train)})
    Base.precompile(Tuple{typeof(Flux.Data.getdata),Array{Float64,2},Array{Int64,1}})
    Base.precompile(Tuple{typeof(Flux.Data.getdata),Array{Int64,2},Array{Int64,1}})
    Base.precompile(Tuple{typeof(Flux.Optimise.apply!),ADAM,Array{Float64,2},Array{Float64,2}})
    Base.precompile(Tuple{typeof(Flux.Optimise.apply!),ExpDecay,Array{Float64,2},Array{Float64,2}})
    Base.precompile(Tuple{typeof(Flux.Optimise.apply!),InvDecay,Array{Float64,2},Array{Float64,2}})
    Base.precompile(Tuple{typeof(Flux.Optimise.apply!),WeightDecay,Array{Float64,2},Array{Float64,2}})
    Base.precompile(Tuple{typeof(Flux.Optimise.runall),Array{Function,1}})
    Base.precompile(Tuple{typeof(Flux.__init__)})
    Base.precompile(Tuple{typeof(Flux._convtransoutdims),Tuple{Int64,Int64},Tuple{Int64,Int64},Tuple{Int64,Int64},Tuple{Int64,Int64},NTuple{4,Int64}})
    Base.precompile(Tuple{typeof(Flux.crosscor),Array{Float32,4},Array{Float32,4},DenseConvDims{2,(2, 2),1,16,(1, 1),(0, 0, 0, 0),(1, 1),false}})
    Base.precompile(Tuple{typeof(Flux.crosscor),Array{Float32,4},Array{Float32,4},DenseConvDims{2,(2, 2),16,8,(1, 1),(0, 0, 0, 0),(1, 1),false}})
    Base.precompile(Tuple{typeof(Flux.crosscor),Array{Float32,4},Array{Float64,4},DenseConvDims{2,(2, 2),1,1,(1, 1),(0, 0, 0, 0),(1, 1),false}})
    Base.precompile(Tuple{typeof(Flux.dice_coeff_loss),Array{Float64,2},Array{Float64,2}})
    Base.precompile(Tuple{typeof(Flux.fmap1),Function,Chain{Tuple{Dense{typeof(relu),Array{Float32,2},Array{Float32,1}},Dense{typeof(identity),Array{Float32,2},Array{Float32,1}}}}})
    Base.precompile(Tuple{typeof(Flux.fmap1),Function,Chain{Tuple{Dense{typeof(relu),Array{Float64,2},Array{Float64,1}},Dense{typeof(identity),Array{Float64,2},Array{Float64,1}}}}})
    Base.precompile(Tuple{typeof(Flux.hinge),Array{Float64,2},Array{Int64,2}})
    Base.precompile(Tuple{typeof(Flux.hinge),Array{Int64,2},Array{Float64,2}})
    Base.precompile(Tuple{typeof(Flux.huber_loss),Array{Float64,1},Array{Int64,1}})
    Base.precompile(Tuple{typeof(Flux.kldivergence),Array{Float64,2},Array{Int64,2}})
    Base.precompile(Tuple{typeof(Flux.kldivergence),Array{Int64,2},Array{Int64,2}})
    Base.precompile(Tuple{typeof(Flux.mae),Array{Float64,1},Array{Int64,1}})
    Base.precompile(Tuple{typeof(Flux.msle),Array{Float64,1},Array{Float64,1}})
    Base.precompile(Tuple{typeof(Flux.outdims),Chain{Tuple{Conv{2,4,typeof(identity),Array{Float32,4},Array{Float32,1}},Conv{2,4,typeof(identity),Array{Float32,4},Array{Float32,1}}}},Tuple{Int64,Int64}})
    Base.precompile(Tuple{typeof(Flux.outdims),ConvTranspose{2,4,typeof(identity),Array{Float32,4},Array{Float32,1}},Tuple{Int64,Int64}})
    Base.precompile(Tuple{typeof(Flux.outdims),CrossCor{2,4,typeof(identity),Array{Float32,4},Array{Float32,1}},Tuple{Int64,Int64}})
    Base.precompile(Tuple{typeof(Flux.outdims),Dense{typeof(identity),Array{Float32,2},Array{Float32,1}},Tuple{Int64,Int64}})
    Base.precompile(Tuple{typeof(Flux.outdims),Dense{typeof(identity),Array{Float32,2},Array{Float32,1}},Tuple{Int64}})
    Base.precompile(Tuple{typeof(Flux.outdims),DepthwiseConv{2,4,typeof(identity),Array{Float32,4},Array{Float32,1}},Tuple{Int64,Int64}})
    Base.precompile(Tuple{typeof(Flux.outdims),Flux.Diagonal{Array{Float32,1}},Tuple{Int64}})
    Base.precompile(Tuple{typeof(Flux.outdims),MaxPool{2,4},Tuple{Int64,Int64}})
    Base.precompile(Tuple{typeof(Flux.outdims),Maxout{Tuple{Conv{2,4,typeof(identity),Array{Float32,4},Array{Float32,1}},Conv{2,4,typeof(identity),Array{Float32,4},Array{Float32,1}}}},Tuple{Int64,Int64}})
    Base.precompile(Tuple{typeof(Flux.outdims),MeanPool{2,4},Tuple{Int64,Int64}})
    Base.precompile(Tuple{typeof(Flux.params!),Params,Array{Float32,1},Zygote.IdSet{Any}})
    Base.precompile(Tuple{typeof(Flux.params!),Params,Array{Float32,2},Zygote.IdSet{Any}})
    Base.precompile(Tuple{typeof(Flux.params!),Params,Array{Float32,4},Zygote.IdSet{Any}})
    Base.precompile(Tuple{typeof(Flux.params!),Params,Flux.RNNCell{typeof(tanh),Array{Float32,2},Array{Float32,1}},Zygote.IdSet{Any}})
    Base.precompile(Tuple{typeof(Flux.params!),Params,Function,Zygote.IdSet{Any}})
    Base.precompile(Tuple{typeof(Flux.params!),Params,NTuple{4,Int64},Zygote.IdSet{Any}})
    Base.precompile(Tuple{typeof(Flux.params!),Params,Tuple{Int64,Int64},Zygote.IdSet{Any}})
    Base.precompile(Tuple{typeof(Flux.poisson),Array{Float64,2},Array{Float64,2}})
    Base.precompile(Tuple{typeof(Flux.squared_hinge),Array{Float64,2},Array{Int64,2}})
    Base.precompile(Tuple{typeof(Flux.squared_hinge),Array{Int64,2},Array{Float64,2}})
    Base.precompile(Tuple{typeof(Flux.tversky_loss),Array{Float64,2},Array{Float64,2}})
    Base.precompile(Tuple{typeof(RNN),Int64,Vararg{Int64,N} where N})
    Base.precompile(Tuple{typeof(activations),Chain{Tuple{}},Array{Float64,1}})
    Base.precompile(Tuple{typeof(collect),Flux.Data.DataLoader})
    Base.precompile(Tuple{typeof(convert),Type{Tuple{Conv{2,4,typeof(identity),Array{Float32,4},Array{Float32,1}},Conv{2,4,typeof(identity),Array{Float32,4},Array{Float32,1}}}},Tuple{Conv{2,4,typeof(identity),Array{Float32,4},Array{Float32,1}},Conv{2,4,typeof(identity),Array{Float32,4},Array{Float32,1}}}})
    Base.precompile(Tuple{typeof(convert),Type{Tuple{Dense{typeof(identity),Array{Float32,2},Array{Float32,1}},Dropout{Float64,Colon}}},Tuple{Dense{typeof(identity),Array{Float32,2},Array{Float32,1}},Dropout{Float64,Colon}}})
    Base.precompile(Tuple{typeof(convert),Type{Tuple{Dense{typeof(relu),Array{Float32,2},Array{Float32,1}},Dense{typeof(identity),Array{Float32,2},Array{Float32,1}}}},Tuple{Dense{typeof(relu),Array{Float32,2},Array{Float32,1}},Dense{typeof(identity),Array{Float32,2},Array{Float32,1}}}})
    Base.precompile(Tuple{typeof(convert),Type{Tuple{Dense{typeof(relu),Array{Float32,2},Array{Float32,1}},Dense{typeof(relu),Array{Float32,2},Array{Float32,1}}}},Tuple{Dense{typeof(relu),Array{Float32,2},Array{Float32,1}},Dense{typeof(relu),Array{Float32,2},Array{Float32,1}}}})
    Base.precompile(Tuple{typeof(convert),Type{Tuple{Flux.Recur{Flux.RNNCell{typeof(tanh),Array{Float32,2},Array{Float32,1}}},Flux.Recur{Flux.RNNCell{typeof(tanh),Array{Float32,2},Array{Float32,1}}}}},Tuple{Flux.Recur{Flux.RNNCell{typeof(tanh),Array{Float32,2},Array{Float32,1}}},Flux.Recur{Flux.RNNCell{typeof(tanh),Array{Float32,2},Array{Float32,1}}}}})
    Base.precompile(Tuple{typeof(copyto!),Array{Any,1},Tuple{Optimiser,ADAGrad,AdaMax,ADADelta,AMSGrad,NADAM,RADAM,Descent,ADAM,Nesterov,RMSProp,Momentum}})
    Base.precompile(Tuple{typeof(copyto!),Array{Function,1},Tuple{typeof(glorot_uniform),typeof(glorot_normal)}})
    Base.precompile(Tuple{typeof(f32),Chain{Tuple{Dense{typeof(relu),Array{Float64,2},Array{Float64,1}},Dense{typeof(identity),Array{Float64,2},Array{Float64,1}}}}})
    Base.precompile(Tuple{typeof(f64),Chain{Tuple{Dense{typeof(relu),Array{Float32,2},Array{Float32,1}},Dense{typeof(identity),Array{Float32,2},Array{Float32,1}}}}})
    Base.precompile(Tuple{typeof(flatten),Array{Float32,4}})
    Base.precompile(Tuple{typeof(fmap),Function,Chain{Tuple{Dense{typeof(relu),Array{Float32,2},Array{Float32,1}},Dense{typeof(identity),Array{Float32,2},Array{Float32,1}}}}})
    Base.precompile(Tuple{typeof(fmap),Function,Chain{Tuple{Dense{typeof(relu),Array{Float64,2},Array{Float64,1}},Dense{typeof(identity),Array{Float64,2},Array{Float64,1}}}}})
    Base.precompile(Tuple{typeof(getindex),Chain{Tuple{Dense{typeof(relu),Array{Float32,2},Array{Float32,1}},Dense{typeof(identity),Array{Float32,2},Array{Float32,1}}}},Int64})
    Base.precompile(Tuple{typeof(getindex),Chain{Tuple{Dense{typeof(relu),Array{Float64,2},Array{Float64,1}},Dense{typeof(identity),Array{Float64,2},Array{Float64,1}}}},Int64})
    Base.precompile(Tuple{typeof(getindex),Flux.OneHotMatrix{Array{Flux.OneHotVector,1}},Colon,Colon})
    Base.precompile(Tuple{typeof(getindex),Flux.OneHotMatrix{Array{Flux.OneHotVector,1}},Colon,Int64})
    Base.precompile(Tuple{typeof(getproperty),Dense{typeof(relu),Array{Float32,2},Array{Float32,1}},Symbol})
    Base.precompile(Tuple{typeof(glorot_normal),Int64,Vararg{Int64,N} where N})
    Base.precompile(Tuple{typeof(glorot_normal),Int64})
    Base.precompile(Tuple{typeof(glorot_uniform),Int64,Vararg{Int64,N} where N})
    Base.precompile(Tuple{typeof(glorot_uniform),Int64})
    Base.precompile(Tuple{typeof(mse),Array{Float64,1},Array{Int64,1}})
    Base.precompile(Tuple{typeof(nfan),Int64,Int64,Int64,Vararg{Int64,N} where N})
    Base.precompile(Tuple{typeof(nfan),Int64,Int64,Int64})
    Base.precompile(Tuple{typeof(nfan),Int64,Int64})
    Base.precompile(Tuple{typeof(nfan),Int64})
    Base.precompile(Tuple{typeof(nfan)})
    Base.precompile(Tuple{typeof(onecold),Array{Float64,1},Array{Char,1}})
    Base.precompile(Tuple{typeof(onecold),Array{Float64,1}})
    Base.precompile(Tuple{typeof(onecold),Array{Int64,2},Array{Char,1}})
    Base.precompile(Tuple{typeof(onecold),Array{Int64,2}})
    Base.precompile(Tuple{typeof(onehotbatch),Array{Float64,1},UnitRange{Int64}})
    Base.precompile(Tuple{typeof(onehotbatch),Array{Int64,1},UnitRange{Int64}})
    Base.precompile(Tuple{typeof(params),Array{Any,1}})
    Base.precompile(Tuple{typeof(params),BatchNorm{typeof(identity),Array{Float32,1},Array{Float32,1},Float32}})
    Base.precompile(Tuple{typeof(params),Chain{Tuple{Flux.Recur{Flux.RNNCell{typeof(tanh),Array{Float32,2},Array{Float32,1}}},Flux.Recur{Flux.RNNCell{typeof(tanh),Array{Float32,2},Array{Float32,1}}}}}})
    Base.precompile(Tuple{typeof(params),ConvTranspose{2,4,typeof(identity),Array{Float32,4},Array{Float32,1}}})
    Base.precompile(Tuple{typeof(params),Dense{typeof(identity),Array{Float32,2},Array{Float32,1}}})
    Base.precompile(Tuple{typeof(params),Flux.Recur{Flux.RNNCell{typeof(tanh),Array{Float32,2},Array{Float32,1}}}})
    Base.precompile(Tuple{typeof(params),GroupNorm{typeof(identity),Array{Float32,1},Array{Float32,2},Float32,Int64}})
    Base.precompile(Tuple{typeof(params),InstanceNorm{typeof(identity),Array{Float32,1},Array{Float32,1},Float32}})
    Base.precompile(Tuple{typeof(params),Maxout{NTuple{4,Dense{typeof(identity),Array{Float32,2},Array{Float32,1}}}}})
    Base.precompile(Tuple{typeof(promote_type),Type{ADADelta},Type{Any}})
    Base.precompile(Tuple{typeof(promote_type),Type{ADAGrad},Type{Any}})
    Base.precompile(Tuple{typeof(promote_type),Type{ADAM},Type{Any}})
    Base.precompile(Tuple{typeof(promote_type),Type{AMSGrad},Type{Any}})
    Base.precompile(Tuple{typeof(promote_type),Type{AdaMax},Type{Any}})
    Base.precompile(Tuple{typeof(promote_type),Type{Descent},Type{Any}})
    Base.precompile(Tuple{typeof(promote_type),Type{NADAM},Type{Any}})
    Base.precompile(Tuple{typeof(promote_type),Type{Nesterov},Type{Any}})
    Base.precompile(Tuple{typeof(promote_type),Type{Optimiser},Type{Any}})
    Base.precompile(Tuple{typeof(promote_type),Type{RADAM},Type{Any}})
    Base.precompile(Tuple{typeof(promote_type),Type{typeof(glorot_uniform)},Type{typeof(glorot_normal)}})
    Base.precompile(Tuple{typeof(setproperty!),Dropout{Float64,Colon},Symbol,Bool})
    Base.precompile(Tuple{typeof(setproperty!),ExpDecay,Symbol,Float64})
    Base.precompile(Tuple{typeof(setproperty!),GroupNorm{typeof(identity),Array{Float32,1},Array{Float32,2},Float32,Int64},Symbol,Array{Float32,2}})
    Base.precompile(Tuple{typeof(setproperty!),InstanceNorm{typeof(identity),Array{Float32,1},Array{Float32,1},Float32},Symbol,Array{Float32,1}})
    Base.precompile(Tuple{typeof(similar),Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Tuple{Base.OneTo{Int64}},typeof(Flux.unsqueeze),Tuple{Base.Broadcast.Extruded{Array{Array{Float64,2},1},Tuple{Bool},Tuple{Int64}},Int64}},Type{Array{Float64,3}}})
    Base.precompile(Tuple{typeof(similar),Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Tuple{Base.OneTo{Int64}},typeof(Flux.unsqueeze),Tuple{Base.Broadcast.Extruded{Array{Array{Int64,1},1},Tuple{Bool},Tuple{Int64}},Int64}},Type{Array{Int64,2}}})
    Base.precompile(Tuple{typeof(sizeof),ADADelta})
    Base.precompile(Tuple{typeof(sizeof),ADAGrad})
    Base.precompile(Tuple{typeof(sizeof),ADAM})
    Base.precompile(Tuple{typeof(sizeof),AMSGrad})
    Base.precompile(Tuple{typeof(sizeof),AdaMax})
    Base.precompile(Tuple{typeof(sizeof),Descent})
    Base.precompile(Tuple{typeof(sizeof),Momentum})
    Base.precompile(Tuple{typeof(sizeof),NADAM})
    Base.precompile(Tuple{typeof(sizeof),Nesterov})
    Base.precompile(Tuple{typeof(sizeof),Optimiser})
    Base.precompile(Tuple{typeof(sizeof),RADAM})
    Base.precompile(Tuple{typeof(sizeof),RMSProp})
    Base.precompile(Tuple{typeof(sizeof),WeightDecay})
    Base.precompile(Tuple{typeof(stack),Array{Array{Float64,2},1},Int64})
    Base.precompile(Tuple{typeof(stack),Array{Array{Int64,1},1},Int64})
    Base.precompile(Tuple{typeof(string),String,ADADelta})
    Base.precompile(Tuple{typeof(string),String,ADAGrad})
    Base.precompile(Tuple{typeof(string),String,ADAM})
    Base.precompile(Tuple{typeof(string),String,AMSGrad})
    Base.precompile(Tuple{typeof(string),String,AdaMax})
    Base.precompile(Tuple{typeof(string),String,Descent})
    Base.precompile(Tuple{typeof(string),String,Momentum})
    Base.precompile(Tuple{typeof(string),String,NADAM})
    Base.precompile(Tuple{typeof(string),String,Nesterov})
    Base.precompile(Tuple{typeof(string),String,Optimiser})
    Base.precompile(Tuple{typeof(string),String,RADAM})
    Base.precompile(Tuple{typeof(string),String,RMSProp})
    Base.precompile(Tuple{typeof(testmode!),Chain{Tuple{Dense{typeof(identity),Array{Float32,2},Array{Float32,1}},Dropout{Float64,Colon}}},Bool})
    Base.precompile(Tuple{typeof(testmode!),Dropout{Float64,Colon},Bool})
    Base.precompile(Tuple{typeof(throttle),Function,Int64})
    Base.precompile(Tuple{typeof(trainmode!),BatchNorm{typeof(identity),Array{Float32,1},Array{Float32,1},Float32}})
    Base.precompile(Tuple{typeof(trainmode!),GroupNorm{typeof(identity),Array{Float32,1},Array{Float32,2},Float32,Int64}})
    Base.precompile(Tuple{typeof(trainmode!),InstanceNorm{typeof(identity),Array{Float32,1},Array{Float32,1},Float32}})
    Base.precompile(Tuple{typeof(unstack),Array{Int64,2},Int64})
    Base.precompile(Tuple{typeof(update!),ADADelta,Array{Float64,2},Array{Float64,2}})
    Base.precompile(Tuple{typeof(update!),ADADelta,Params,Zygote.Grads})
    Base.precompile(Tuple{typeof(update!),ADAGrad,Array{Float64,2},Array{Float64,2}})
    Base.precompile(Tuple{typeof(update!),ADAGrad,Params,Zygote.Grads})
    Base.precompile(Tuple{typeof(update!),ADAM,Array{Float64,2},Array{Float64,2}})
    Base.precompile(Tuple{typeof(update!),ADAM,Params,Zygote.Grads})
    Base.precompile(Tuple{typeof(update!),AMSGrad,Array{Float64,2},Array{Float64,2}})
    Base.precompile(Tuple{typeof(update!),AMSGrad,Params,Zygote.Grads})
    Base.precompile(Tuple{typeof(update!),AdaMax,Array{Float64,2},Array{Float64,2}})
    Base.precompile(Tuple{typeof(update!),AdaMax,Params,Zygote.Grads})
    Base.precompile(Tuple{typeof(update!),Descent,Array{Float64,1},Array{Float64,1}})
    Base.precompile(Tuple{typeof(update!),Descent,Array{Float64,2},Array{Float64,2}})
    Base.precompile(Tuple{typeof(update!),Descent,Params,Zygote.Grads})
    Base.precompile(Tuple{typeof(update!),Momentum,Array{Float64,2},Array{Float64,2}})
    Base.precompile(Tuple{typeof(update!),Momentum,Params,Zygote.Grads})
    Base.precompile(Tuple{typeof(update!),NADAM,Array{Float64,2},Array{Float64,2}})
    Base.precompile(Tuple{typeof(update!),NADAM,Params,Zygote.Grads})
    Base.precompile(Tuple{typeof(update!),Nesterov,Array{Float64,2},Array{Float64,2}})
    Base.precompile(Tuple{typeof(update!),Nesterov,Params,Zygote.Grads})
    Base.precompile(Tuple{typeof(update!),Optimiser,Array{Float64,2},Array{Float64,2}})
    Base.precompile(Tuple{typeof(update!),Optimiser,Params,Zygote.Grads})
    Base.precompile(Tuple{typeof(update!),RADAM,Array{Float64,2},Array{Float64,2}})
    Base.precompile(Tuple{typeof(update!),RADAM,Params,Zygote.Grads})
    Base.precompile(Tuple{typeof(update!),RMSProp,Array{Float64,2},Array{Float64,2}})
    Base.precompile(Tuple{typeof(update!),RMSProp,Params,Zygote.Grads})
    Base.precompile(Tuple{typeof(|>),Array{Float32,4},Conv{2,4,typeof(σ),Array{Float32,4},Array{Float32,1}}})
    isdefined(Flux, Symbol("##Conv#102")) && Base.precompile(Tuple{getfield(Flux, Symbol("##Conv#102")),Function,Int64,Int64,Int64,Type{Conv},Tuple{Int64,Int64},Pair{Int64,Int64},Function})
    isdefined(Flux, Symbol("##Conv#102")) && Base.precompile(Tuple{getfield(Flux, Symbol("##Conv#102")),Function,Int64,NTuple{4,Int64},Int64,Type{Conv},Tuple{Int64,Int64},Pair{Int64,Int64},Function})
    isdefined(Flux, Symbol("##ConvTranspose#108")) && Base.precompile(Tuple{getfield(Flux, Symbol("##ConvTranspose#108")),Function,Int64,Int64,Int64,Type{ConvTranspose},Tuple{Int64,Int64},Pair{Int64,Int64},Function})
    isdefined(Flux, Symbol("##CrossCor#122")) && Base.precompile(Tuple{getfield(Flux, Symbol("##CrossCor#122")),Function,Int64,Int64,Int64,Type{CrossCor},Tuple{Int64,Int64},Pair{Int64,Int64},Function})
    isdefined(Flux, Symbol("##DepthwiseConv#116")) && Base.precompile(Tuple{getfield(Flux, Symbol("##DepthwiseConv#116")),Function,Int64,Int64,Int64,Type{DepthwiseConv},Tuple{Int64,Int64},Pair{Int64,Int64},Function})
    isdefined(Flux, Symbol("#171#172")) && Base.precompile(Tuple{getfield(Flux, Symbol("#171#172")),Array{Float32,1},NTuple{4,Int64}})
    isdefined(Flux, Symbol("#171#172")) && Base.precompile(Tuple{getfield(Flux, Symbol("#171#172")),Array{Float32,1},NTuple{5,Int64}})
    isdefined(Flux, Symbol("#171#172")) && Base.precompile(Tuple{getfield(Flux, Symbol("#171#172")),Array{Float32,1},NTuple{6,Int64}})
    isdefined(Flux, Symbol("#171#172")) && Base.precompile(Tuple{getfield(Flux, Symbol("#171#172")),Array{Float32,1},Tuple{Int64,Int64,Int64}})
    isdefined(Flux, Symbol("#18#23")) && Base.precompile(Tuple{getfield(Flux, Symbol("#18#23"))})
    isdefined(Flux, Symbol("#19#24")) && Base.precompile(Tuple{getfield(Flux, Symbol("#19#24"))})
    isdefined(Flux, Symbol("#31#32")) && Base.precompile(Tuple{getfield(Flux, Symbol("#31#32")),Array{Int64,1}})
    isdefined(Flux, Symbol("#75#76")) && Base.precompile(Tuple{getfield(Flux, Symbol("#75#76")),Tuple{Dense{typeof(relu),Array{Float32,2},Array{Float32,1}},Dense{typeof(identity),Array{Float32,2},Array{Float32,1}}}})
    isdefined(Flux, Symbol("#75#76")) && Base.precompile(Tuple{getfield(Flux, Symbol("#75#76")),Tuple{Dense{typeof(relu),Array{Float64,2},Array{Float64,1}},Dense{typeof(identity),Array{Float64,2},Array{Float64,1}}}})
    isdefined(Flux, Symbol("#throttled#20")) && Base.precompile(Tuple{getfield(Flux, Symbol("#throttled#20")),Int64})
    isdefined(Flux, Symbol("#throttled#20")) && Base.precompile(Tuple{getfield(Flux, Symbol("#throttled#20"))})
    isdefined(Flux.Data, Symbol("##DataLoader#3")) && Base.precompile(Tuple{getfield(Flux.Data, Symbol("##DataLoader#3")),Int64,Bool,Bool,Core.Type{Flux.Data.DataLoader},Array{Int64,2},Vararg{Any,N} where N})
    isdefined(Flux.Optimise, Symbol("#10#11")) && Base.precompile(Tuple{getfield(Flux.Optimise, Symbol("#10#11"))})
    isdefined(Flux.Optimise, Symbol("#8#9")) && Base.precompile(Tuple{getfield(Flux.Optimise, Symbol("#8#9")),Int64})
    isdefined(Zygote, Symbol("#38#39")) && Base.precompile(Tuple{getfield(Zygote, Symbol("#38#39")),Float32})
    isdefined(Zygote, Symbol("#38#39")) && Base.precompile(Tuple{getfield(Zygote, Symbol("#38#39")),Float64})
    isdefined(Zygote, Symbol("#50#51")) && Base.precompile(Tuple{getfield(Zygote, Symbol("#50#51")),Float32})
    isdefined(Zygote, Symbol("#50#51")) && Base.precompile(Tuple{getfield(Zygote, Symbol("#50#51")),Float64})
end
